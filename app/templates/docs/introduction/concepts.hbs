<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.introduction">Introduction</Crumb::Item>
	<Crumb::Item @link="docs.introduction.concepts">Concepts</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
    <h2>Concepts</h2>
	<p>This page aims to give details about some of the core concepts of SurrealDB, including the intended usecases, design choices, and overarching features.</p>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Traditional database or backend layer</h3>
	<p>SurrealDB can be used either as a traditional database platform, with backend languages and frameworks including Golang, Python, Rust, C, Java, .Net, Node.js, and PHP. Alternatively, you can use SurrealDB as a complete backend platform, connecting directly to it from frontend languages and frameworks including JavaScript, <Link @link="https://webassembly.org/">WebAssembly</Link>, <Link @link="https://react.dev/">React.js</Link>, <Link @link="https://nextjs.org/">Next.js</Link>, and <Link @link="https://emberjs.com/">Ember.js</Link>. In this mode, permissions can be defined on a table, record, and field level, allow for granular data access patterns for multiple different types of users.</p>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Relational, document, or graph</h3>
	<p>SurrealDB is, at its core, a document database. Each record is stored on an underlying key-value store storage engine, with the ability to store arbitrary arrays, objects, and many other types of data. However, SurrealDB isn't just a document database. Because of the way that SurrealDB handles Record IDs and the fetching of individual records from the underlying key-value storage engine, it can be used to store time-series ordered data, and highly-connected graph data. With the addition of an SQL-like query language (named <Link @link="docs.surrealql">SurrealQL</Link>), it is easy to create, update, and read data from across the database.</p>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Single-node or distributed</h3>
	<p>SurrealDB is designed to be run in many different ways, and environments. Due to the <Link @link="docs.introduction.architecture">separation of the storage and compute</Link> layers, SurrealDB can be run in embedded mode, as a vertically-scalable, single-node database server, or as a horizontally-scalable, multi-node, distributed cluster. In embedded mode, SurrealDB can be run with an in-memory storage engine, in a web browser it can persist data using <Link @link="https://web.dev/indexeddb/">IndexedDB</Link>, or it can persist data using the file-based <Link @link="https://rocksdb.org">RocksDB</Link> storage engine. As a database server, SurrealDB can currently be configured to store data using <Link @link="https://rocksdb.org">RocksDB</Link>, <Link @link="https://tikv.org">TiKV</Link>, or <Link @link="https://www.foundationdb.org">FoundationDB</Link>.</p>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>System structure</h3>
	<p>
		SurrealDB works similarly to other traditional relational databases, and document databases, with a few slight differences.
		SurrealDB is designed and developed to be a multi-tenant database platform with a high-level <Link @link="docs.surrealql.statements.define.namespace"> <code>namespace</code></Link>
		layer designed as a separation for each organisations, department, or development team.
		There is no limit to the number of namespaces on SurrealDB.
		Below this, the <Link @link="docs.surrealql.statements.define.database"> <code>databases</code> </Link> layer is similar to databases in other database management systems.
		There is no limit to the number of databases on each namespace. Within each database, data can be stored within
		<Link @link="docs.surrealql.statements.define.table"> <code>table</code></Link> definitions, otherwise known as collections in other database management systems.
		In SurrealDB each row or document is called a <Link @link="docs.surrealql.datamodel.ids"> <code>records</code></Link> and columns are called <Link @link="docs.surrealql.statements.define.field"> <code>fields</code></Link>.
		While you can <Link @link="docs.surrealql.statements.define"> <code>define</code> </Link>:
		<Layout::Gap tiny />
		<ul>
			<li> <Link @link="docs.surrealql.statements.define.namespace"> <code>namespaces</code> </Link> </li>
			<li> <Link @link="docs.surrealql.statements.define.database"> <code>databases</code> </Link></li>
			<li> <Link @link="docs.surrealql.statements.define.table"> <code>tables</code></Link></li>
			<li> <Link @link="docs.surrealql.statements.define.field"> <code>fields</code></Link></li>
		</ul>
		You cannot define <Link @link="docs.surrealql.datamodel.ids"> <code>records</code></Link>, you can only
		<Link @link="docs.surrealql.statements.create">create</Link>,
		<Link @link="docs.surrealql.statements.select">read</Link>,
		<Link @link="docs.surrealql.statements.update">update</Link> and
		<Link @link="docs.surrealql.statements.delete">delete</Link> them.
	</p>
	<p>Multiple authentication <code>scope</code> definitions can be defined on each <code>database</code>, allowing for custom authentication across tables, records, and fields.</p>
	<Layout::Gap mini />
	<img src="/static/img/docs/introduction/concepts.png" w-100 />
</Layout::Text>

<Layout::Gap large />